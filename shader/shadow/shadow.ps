#version 430

out vec4 color;

in VS_OUT
{
    vec3 _position;
    vec3 _normal;
    vec2 _texCoords;
    vec4 _fragPosLightSpace;
} ps_in;

layout(binding = 0) uniform sampler2D diffuseTex;
layout(binding = 1) uniform sampler2D shadowTex;

uniform vec3 lightPos;
uniform vec3 viewPos;

float isShadow(vec4 fragPosLightSpace, vec3 normal, vec3 lightDir)
{
    // set [-1, 1] (worked on perspective projection)
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;

    // for use it like texture coordinates set [0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    // closest depth (look from light texture)
    float closestDepth = texture(shadowTex, projCoords.xy).r;

    // get current depth 
    float currentDepth = projCoords.z;

    // add bias to get rid of shadow acne
    // with bias depth cannot be same as real depth
    // we add angle because with perfect angle it will give shadow acne 
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

    // make more smooth shadows by multisampling
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowTex, 0);

    for(int x = -1; x <= 1; x++)
    {
        for(int y = -1; y <= 1; y++)
        {
            float pcfDepth = texture(shadowTex, projCoords.xy + vec2(x, y) * texelSize).r;

            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
        }
    }

    shadow /= 9.0;

    // if real depth bigger than 1.0 
    // we cannot consider there will be shadow
    if(projCoords.z > 1.0)
        shadow = 0.0; 

    return shadow;
}

void main()
{
    vec3 texColor = texture(diffuseTex, ps_in._texCoords).rgb;
    vec3 normal = normalize(ps_in._normal);
    vec3 lightColor = vec3(1.0);

    vec3 lightDir = normalize(lightPos - ps_in._position);
    vec3 viewDir = normalize(viewPos - ps_in._position);
    vec3 halfwayDir = normalize(lightDir + viewDir);

    vec3 ambient = 0.15 * texColor;

    vec3 diffuse = lightColor * max(dot(lightDir, normal), 0.0);

    vec3 specular = lightColor * pow(max(dot(normal, halfwayDir), 0.0), 30.0);

    float shadow = isShadow(ps_in._fragPosLightSpace, normal, lightDir);
    vec3 lighting = (ambient + (1.0 - shadow) * (diffuse + specular)) * texColor;

    color = vec4(lighting, 1.0);
}
